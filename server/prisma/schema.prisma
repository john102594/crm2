generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id             Int             @id() @default(autoincrement())
  name           String          @db.VarChar(40)
  phone          String?         @db.VarChar(15)
  website        String?         @db.VarChar(100)
  documentNumber String          @db.VarChar(20)
  documentType   DocumentTypEnum @default(CC)
  createdAt      DateTime        @default(now()) @db.Timestamp(6)
  updateAt       DateTime        @default(now()) @db.Timestamp(6)
  suppliers      Supplier[]
}

model Customer {
  id        Int      @id() @default(autoincrement())
  maxCredit Int?
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updateAt  DateTime @default(now()) @db.Timestamp(6)
  personId  Int      @unique()
  person    Person   @relation(fields: [personId], references: [id])
  user      User?
}

model Employee {
  id        Int      @id @default(autoincrement())
  job       String?  @db.VarChar(255)
  salary    Int      @default(0)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updateAt  DateTime @default(now()) @db.Timestamp(6)
  personId  Int      @unique()
  person    Person   @relation(fields: [personId], references: [id])
}

model InventoryTransaction {
  id                Int                      @id() @default(autoincrement())
  quantity          Float
  unitPrice         Float?
  balance           Float
  unitCostAvg       Float
  transactionTypeId Int
  createdAt         DateTime                 @default(now()) @db.Timestamp(6)
  updateAt          DateTime                 @default(now()) @db.Timestamp(6)
  productId         Int
  product           Product                  @relation(fields: [productId], references: [id])
  TransactionType   InventoryTransactionType @relation(fields: [transactionTypeId], references: [id])
}

model InventoryTransactionType {
  id                   Int                    @id() @default(autoincrement())
  name                 String
  InventoryTransaction InventoryTransaction[]
}

model Person {
  id             Int             @id() @default(autoincrement())
  name           String          @db.VarChar(50)
  email          String?         @db.VarChar(50)
  phone          String?         @db.VarChar(15)
  documentNumber String          @db.VarChar(20)
  documentType   DocumentTypEnum @default(CC)
  createdAt      DateTime        @default(now()) @db.Timestamp(6)
  updateAt       DateTime        @default(now()) @db.Timestamp(6)
  customer       Customer?
  employee       Employee?
  supplier       Supplier?
}

model Product {
  id                    Int                    @id() @default(autoincrement())
  name                  String                 @db.VarChar(255)
  sku                   String                 @unique()
  image                 String?                @db.VarChar(255)
  createdAt             DateTime               @default(now()) @db.Timestamp(6)
  updateAt              DateTime               @default(now()) @db.Timestamp(6)
  unitCostAvg           Float?
  salePrice             Float?
  quantity              Float?
  inventoryTransactions InventoryTransaction[]
  purchaseOrderDetails  PurchaseOrderDetail[]
  saleOrderDetails      SaleOrderDetail[]
}

model PurchaseOrder {
  id                   Int                   @id() @default(autoincrement())
  createdAt            DateTime              @default(now()) @db.Timestamp(6)
  updateAt             DateTime              @default(now()) @db.Timestamp(6)
  // inventoryTransactions InventoryTransaction[]
  purchaseOrderDetails PurchaseOrderDetail[]
}

model PurchaseOrderDetail {
  id              Int           @id() @default(autoincrement())
  quantity        Float
  unit_cost       Float
  createdAt       DateTime      @default(now()) @db.Timestamp(6)
  updateAt        DateTime      @default(now()) @db.Timestamp(6)
  productId       Int
  purchaseOrderId Int
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  product         Product       @relation(fields: [productId], references: [id])
}

model SaleOrder {
  id               Int               @id() @default(autoincrement())
  createdAt        DateTime          @default(now()) @db.Timestamp(6)
  updateAt         DateTime          @default(now()) @db.Timestamp(6)
  // inventoryTransactions InventoryTransaction[]
  saleOrderDetails SaleOrderDetail[]
}

model SaleOrderDetail {
  id          Int       @id() @default(autoincrement())
  quantity    Float
  unit_price  Float
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updateAt    DateTime  @default(now()) @db.Timestamp(6)
  productId   Int
  saleOrderId Int
  product     Product   @relation(fields: [productId], references: [id])
  saleOrder   SaleOrder @relation(fields: [saleOrderId], references: [id])
}

model Supplier {
  id        Int      @id() @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updateAt  DateTime @default(now()) @db.Timestamp(6)
  personId  Int?     @unique()
  companyId Int?
  person    Person?  @relation(fields: [personId], references: [id])
  company   Company? @relation(fields: [companyId], references: [id])
}

model User {
  id         Int      @id() @default(autoincrement())
  email      String   @db.VarChar(255)
  password   String   @db.VarChar(255)
  role       String   @db.VarChar(100)
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updateAt   DateTime @default(now()) @db.Timestamp(6)
  customerId Int      @unique()
  customer   Customer @relation(fields: [customerId], references: [id])
}

enum DocumentTypEnum {
  CC
  CE
  TI
  NIT
  PP
  CD
  RC
}
